#!/usr/bin/env python3
"""
Caloria Setup Script
Helps initialize the application with proper configuration
"""

import os
import sys
from getpass import getpass

def create_env_file():
    """Create environment configuration file"""
    env_content = """# Caloria Environment Configuration
# Generated by setup script

# Flask Configuration
SECRET_KEY={secret_key}
FLASK_ENV=development

# Database Configuration (optional, defaults to SQLite)
DATABASE_URL=sqlite:///caloria.db
# For PostgreSQL: postgresql://username:password@localhost:5432/caloria

# External API Keys
SPOONACULAR_API_KEY={spoonacular_key}
MANYCHAT_API_TOKEN={manychat_token}

# Optional API Keys
OPENAI_API_KEY=
GOOGLE_CLOUD_API_KEY=

# Admin Configuration
DEFAULT_ADMIN_USERNAME=admin
DEFAULT_ADMIN_PASSWORD={admin_password}

# Application Configuration
UPLOAD_FOLDER=uploads
MAX_CONTENT_LENGTH=16777216

# Logging
LOG_LEVEL=INFO

# Scheduler Configuration
DAILY_UPDATE_HOUR=20
DAILY_UPDATE_MINUTE=0
"""
    
    print("üöÄ Welcome to Caloria Setup!")
    print("This script will help you configure your environment.\n")
    
    # Generate secret key
    import secrets
    secret_key = secrets.token_urlsafe(32)
    
    # Get API keys
    print("üì° API Configuration:")
    spoonacular_key = input("Enter your Spoonacular API key (required): ").strip()
    if not spoonacular_key:
        print("‚ùå Spoonacular API key is required!")
        sys.exit(1)
    
    manychat_token = input("Enter your ManyChat API token (required): ").strip()
    if not manychat_token:
        print("‚ùå ManyChat API token is required!")
        sys.exit(1)
    
    # Admin password
    print("\nüîê Admin Configuration:")
    admin_password = getpass("Enter admin password (default: admin123): ").strip()
    if not admin_password:
        admin_password = "admin123"
    
    # Write env file
    with open('.env', 'w') as f:
        f.write(env_content.format(
            secret_key=secret_key,
            spoonacular_key=spoonacular_key,
            manychat_token=manychat_token,
            admin_password=admin_password
        ))
    
    print("‚úÖ Environment file created successfully!")

def check_dependencies():
    """Check if required dependencies are installed"""
    print("\nüì¶ Checking dependencies...")
    
    try:
        import flask
        import sqlalchemy
        import requests
        print("‚úÖ Core dependencies found")
    except ImportError as e:
        print(f"‚ùå Missing dependency: {e}")
        print("Please run: pip install -r requirements.txt")
        sys.exit(1)

def create_directories():
    """Create necessary directories"""
    print("\nüìÅ Creating directories...")
    
    directories = ['uploads', 'logs', 'static/css', 'static/js']
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úÖ Created: {directory}")

def initialize_database():
    """Initialize the database"""
    print("\nüíæ Initializing database...")
    
    try:
        # Import after dependencies are checked
        from app import app, db, AdminUser
        
        with app.app_context():
            db.create_all()
            
            # Create default admin user if it doesn't exist
            if not AdminUser.query.first():
                admin = AdminUser(
                    username='admin',
                    email='admin@caloria.com'
                )
                admin.set_password('admin123')  # This will be overridden by env var
                db.session.add(admin)
                db.session.commit()
                print("‚úÖ Default admin user created")
            else:
                print("‚úÖ Database already initialized")
        
        print("‚úÖ Database initialization complete")
        
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        sys.exit(1)

def show_next_steps():
    """Show next steps for the user"""
    print("\nüéâ Setup Complete!")
    print("\nNext steps:")
    print("1. Start the application: python app.py")
    print("2. Visit http://localhost:5000 to see the landing page")
    print("3. Visit http://localhost:5000/admin to access the admin panel")
    print("4. Configure your ManyChat webhook to point to: http://your-domain.com/webhook/manychat")
    print("\nüìö Documentation: Check README.md for detailed setup instructions")
    print("üîß Configuration: Edit .env file to customize settings")

def main():
    """Main setup function"""
    print("=" * 60)
    print("ü•ó CALORIA - WhatsApp Calorie Tracker Setup")
    print("=" * 60)
    
    # Check if already set up
    if os.path.exists('.env'):
        overwrite = input("\n‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            sys.exit(0)
    
    check_dependencies()
    create_env_file()
    create_directories()
    initialize_database()
    show_next_steps()

if __name__ == "__main__":
    main() 